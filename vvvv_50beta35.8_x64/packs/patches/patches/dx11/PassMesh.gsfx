
float4x4 tWVP : WORLDVIEWPROJECTION;
float4x4 tWV : WORLDVIEW;

struct VS_IN
{
	float4 pos : POSITION;
};

struct VS_OUTPUT
{
	float4 pos : POSITION;
};


VS_OUTPUT VS(VS_IN input)
{
	VS_OUTPUT o;
	o.pos = input.pos;
    return o;
}

//float eps : EPSILON = 0.000001f;

[maxvertexcount(3)]
void GS(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT> gsout)
{
	VS_OUTPUT elem = (VS_OUTPUT)0;

	//Transform triangles
	elem.pos = input[0].pos;
	gsout.Append(elem);
	
	elem.pos = input[1].pos;
	gsout.Append(elem);
	
	elem.pos = input[2].pos;
	gsout.Append(elem);

	gsout.RestartStrip();
}

GeometryShader gsStreamOut = ConstructGSWithSO(CompileShader(gs_4_0, GS()), "POSITION.xyz");
technique10 PassMesh_VertexPos
{
    pass P0
    {
        SetVertexShader(CompileShader(vs_4_0, VS()));
        SetGeometryShader(gsStreamOut);
    }  
}

//GeometryShader gsStreamOut = ConstructGSWithSO(CompileShader(gs_4_0, GS()), "POSITION.xyz");
//technique10 PassMesh
//{
//    pass P0
//    {
//        SetVertexShader(CompileShader(vs_4_0, VS()));
//        SetGeometryShader(gsStreamOut);
//    }  
//}


