//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ReShade 3.0 effect file
// visit facebook.com/MartyMcModding for news/updates
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Ambient Obscurance with Indirect Lighting "MXAO" 2.0 by Marty McFly
// CC BY-NC-ND 3.0 licensed.
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Preprocessor Settings
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include "ReShade.fxh"
//#include <packs/mp.fxh/math/rotate.fxh>

#if defined(__INTELLISENSE__)
#define MXAO_SMOOTHNORMALS
#define MXAO_IL
#define MXAO_BACKFACE
#endif

#if !defined(SHADERMODEL)
#define SHADERMODEL 4
#endif

#if !defined(MXAO_NORMALS_FORMAT) /// -type string
#define MXAO_NORMALS_FORMAT "R16G16B16A16_Float"
#endif

#if !defined(OUTFORMAT) /// -type string
#define OUTFORMAT "R16G16B16A16_Float"
#endif

#if !defined(MXAO_BLUR_GAMMA) /// -type float
#define MXAO_BLUR_GAMMA 2.0
#endif

#if !defined(MXAO_MIPLEVEL_AO) /// -type int
#define MXAO_MIPLEVEL_AO 0
#endif

#if !defined(MXAO_MIPLEVEL_IL) /// -type int
#define MXAO_MIPLEVEL_IL 2
#endif


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// UI variables
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

cbuffer cbuf : register(b0)
{
    uniform float fMXAOAmbientOcclusionAmount <
	    float uimin = 0.00; float uimax = 3.00;
        string uiname = "Ambient Occlusion Amount";
    > = 2.00;

    uniform float fMXAOIndirectLightingAmount <
	    float uimin = 0.00; float uimax = 12.00;
        string uiname = "Indirect Lighting Amount";
    > = 4.00;

    uniform float fMXAOIndirectLightingSaturation <
	    float uimin = 0.00; float uimax = 3.00;
        string uiname = "Indirect Lighting Saturation";
    > = 1.00;

    uniform float fMXAOSampleRadius <
	    float uimin = 0.01; float uimax = 8.00;
        string uiname = "Sample Radius";
    > = 2.50;

    uniform int iMXAOSampleCount <
	    float uimin = 8; float uimax = 255;
        string uiname = "Sample Count";
    > = 24;

    uniform int iMXAOBayerDitherLevel <
	    float uimin = 2; float uimax = 8;
        string uiname = "Dither Size";
    > = 3;

    uniform float fMXAONormalBias <
	    float uimin = 0.0; float uimax = 0.8;
        string uiname = "Normal Bias";
    > = 0;

    uniform float fMXAOBlurSharpness <
	    float uimin = 0.00; float uimax = 5.00;
        string uiname = "Blur Sharpness";
    > = 2.00;

    uniform int fMXAOBlurSteps <
	    float uimin = 0; float uimax = 5;
        string uiname = "Blur Steps";
    > = 2;

    uniform bool bMXAODebugViewEnable <
        string uiname = "Enable Debug View";
    > = false;

    uniform float fMXAOFadeoutStart <
	    string uiname = "Fade Out Start";
	    float uimin = 0.00; float uimax = 1.00;
    > = 0.98;

    uniform float fMXAOFadeoutEnd <
	    string uiname = "Fade Out End";
	    float uimin = 0.00; float uimax = 1.00;
    > = 0.99;
    uniform float fMXAOSmoothNormWidth <
	    string uiname = "Smooth Normals Width";
	    float uimin = 3.5; float uimax = 11.5;
    > = 3.5;
};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Textures, Samplers
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Texture2D texNormBayer : PASSRESULT0;
Texture2D<float> texDistance : PASSRESULT1;
Texture2D texExtNormals;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Functions
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/* Fetches linearized depth value. depth data ~ distance from camera
   and 0 := camera, 1:= "infinite" distance, e.g. sky. */
float GetLinearDepth(float2 coords)
{
	return ReShade_GetLinearizedDepth(coords);
}

/* Fetches position relative to camera. This is somewhat inaccurate
   as it assumes FoV == 90 degrees but yields good enough results.
   Axes are multiplied with far plane to better scale the occlusion
   falloff and save instruction in AO main pass. Also using a bigger
   data range seems to reduce precision artifacts for logarithmic
   depth buffer option. */
float3 GetPosition(float2 coords)
{
    float farplane;
    return float3(coords.xy * 2.0 - 1.0, 1.0) * ReShade_GetLinearizedDepth(coords.xy, farplane) * farplane;
}

/* Same as above, except linearized and scaled data is already stored
   in dedicated texture and we're sampling mipmaps here. */
float3 GetPositionLOD(float2 coords, float mipLevel)
{
    return float3(coords.xy * 2.0 - 1.0, 1.0) * texDistance.SampleLevel(ReShade_sL, coords, mipLevel).x;
}

/* Calculates normals based on partial depth buffer derivatives.
   Does a similar job to ddx/ddy but this is higher quality and
   it also takes care for object borders where usual ddx/ddy produce
   inaccurate normals.*/
float3 GetNormalFromDepth(float2 coords)
{
	float3 offs = float3(PIXELSIZE,0);

	float3 f 	 =       GetPosition(coords.xy);
	float3 d_dx1 	 = - f + GetPosition(coords.xy + offs.xz);
	float3 d_dx2 	 =   f - GetPosition(coords.xy - offs.xz);
	float3 d_dy1 	 = - f + GetPosition(coords.xy + offs.zy);
	float3 d_dy2 	 =   f - GetPosition(coords.xy - offs.zy);

	d_dx1 = lerp(d_dx1, d_dx2, abs(d_dx1.z) > abs(d_dx2.z));
	d_dy1 = lerp(d_dy1, d_dy2, abs(d_dy1.z) > abs(d_dy2.z));

	return normalize(cross(d_dy1,d_dx1) - float3(0,0,0));
}

/* Box blur on normal map texture. Yes, it's as stupid as it sounds
   but helps nicely to get rid of too obvious geometry lines in
   landscape where a plain normal bias doesn't cut it. After all
   we're doing approximations over approximations. */
float3 GetSmoothedNormals(float2 texcoord, float3 ScreenSpaceNormals, float3 ScreenSpacePosition)
{
	
	float4 blurnormal = 0.0;
	[loop]
	for(float x = -3; x <= 3; x++)
	{
		[loop]
		for(float y = -3; y <= 3; y++)
		{
			float2 offsetcoord 	= texcoord.xy + float2(x,y) * PIXELSIZE.xy * fMXAOSmoothNormWidth;
			float3 samplenormal 	= normalize(texNormBayer.SampleLevel(ReShade_sL, offsetcoord, 2).xyz * 2.0 - 1.0);
			float3 sampleposition	= GetPositionLOD(offsetcoord.xy,2);
			float weight 		= saturate(1.0 - distance(ScreenSpacePosition.xyz,sampleposition.xyz)*1.2);
			weight 		       *= smoothstep(0.5,1.0,dot(samplenormal,ScreenSpaceNormals));
			blurnormal.xyz += samplenormal * weight;
			blurnormal.w += weight;
		}
	}

	return normalize(blurnormal.xyz / (0.0001 + blurnormal.w) + ScreenSpaceNormals*0.05);
}

/* Fetches normal and depth data for bilateral AO blur weight
   calculation. As we already have linearized depth as own texture,
   we might as well use it and save some instructions, also R16F
   is lower than usual R32F original game depth data.*/
float4 GetBlurFactors(float2 coords)
{
	return float4(texNormBayer.SampleLevel(ReShade_sL, coords.xy, 0).xyz*2.0-1.0, texDistance.SampleLevel(ReShade_sL, coords.xy,0).x);
}

/* Calculates weights for bilateral AO blur. Using only
   depth is surely faster but it doesn't really cut it, also
   areas with a flat angle to the camera will have high depth
   differences, hence blur will cause stripes as seen in many
   AO implementations, even HBAO+. Taking view angle into
   account greatly helps to reduce these problems. */
float GetBlurWeight(float4 tempKey, float4 centerKey, float surfacealignment)
{
	float depthdiff = abs(tempKey.w-centerKey.w);
	float normaldiff = 1.0-saturate(dot(normalize(tempKey.xyz),normalize(centerKey.xyz)));

	float depthweight = saturate(rcp(fMXAOBlurSharpness*depthdiff*5.0*surfacealignment));
	float normalweight = saturate(rcp(fMXAOBlurSharpness*normaldiff*10.0));

	return min(normalweight,depthweight);
}

/* Bilateral blur, exploiting bilinear filter
   for additional blurring. Intel paper covered
   faster gaussian blur with similar offset and
   weight development of discrete gaussian, this
   here is basically the same, only applied on
   box blur. This function only blurs AO and reads
   the normals from RGB channel of backbuffer.*/
float4 GetBlurredAO( float2 texcoord, Texture2D inputTex, float2 axis, int nSteps)
{
	float4 tempsample;
	float4 centerkey   , tempkey;
	float  centerweight, tempweight;
	float surfacealignment;
	float4 blurcoord = 0.0;
	float AO         = 0.0;

	tempsample 	 = inputTex.SampleLevel(ReShade_sL,texcoord.xy,0);
	centerkey 	 = float4(tempsample.xyz*2-1,texDistance.SampleLevel(ReShade_sL,texcoord.xy,0).x);
	centerweight     = 0.5;
	AO               = tempsample.w * 0.5;
	surfacealignment = saturate(-dot(centerkey.xyz,normalize(float3(texcoord.xy*2.0-1.0,1.0)*centerkey.w)));

	[loop]
	for(int orientation=-1;orientation<=1; orientation+=2)
	{
		[loop]
		for(float iStep = 1.0; iStep <= nSteps; iStep++)
		{
			blurcoord.xy 	= (2.0 * iStep - 0.5) * orientation * axis * PIXELSIZE.xy + texcoord.xy;
			tempsample = inputTex.SampleLevel(ReShade_sL, blurcoord.xy,0);
			tempkey    = float4(tempsample.xyz*2-1,texDistance.SampleLevel(ReShade_sL,blurcoord.xy,0).x);
			tempweight = GetBlurWeight(tempkey, centerkey, surfacealignment);
			AO += tempsample.w * tempweight;
			centerweight   += tempweight;
		}
	}

	return float4(centerkey.xyz*0.5+0.5, AO / centerweight);
}

/* Same as above, except it blurs RGBA and hence
   needs to read normals separately. */
float4 GetBlurredAOIL( float2 texcoord, Texture2D inputTex, float2 axis, int nSteps)
{
	float4 tempsample;
	float4 centerkey   , tempkey;
	float  centerweight, tempweight;
	float surfacealignment;
	float4 blurcoord = 0.0;
	float4 AO_IL         = 0.0;

	tempsample 	 = inputTex.SampleLevel(ReShade_sL,texcoord.xy,0);
	centerkey 	 = float4(texNormBayer.SampleLevel(ReShade_sL,texcoord.xy,0).xyz*2-1,texDistance.SampleLevel(ReShade_sL,texcoord.xy,0).x);
	centerweight     = 0.5;
	AO_IL            = tempsample * 0.5;
	surfacealignment = saturate(-dot(centerkey.xyz,normalize(float3(texcoord.xy*2.0-1.0,1.0)*centerkey.w)));

	[loop]
	for(int orientation=-1;orientation<=1; orientation+=2)
	{
		[loop]
		for(float iStep = 1.0; iStep <= nSteps; iStep++)
		{
			blurcoord.xy 	= (2.0 * iStep - 0.5) * orientation * axis * PIXELSIZE.xy + texcoord.xy;
			tempsample = inputTex.SampleLevel(ReShade_sL, blurcoord.xy,0);
			tempkey    = float4(texNormBayer.SampleLevel(ReShade_sL,blurcoord.xy,0).xyz*2-1,texDistance.SampleLevel(ReShade_sL,blurcoord.xy,0).x);
			tempweight = GetBlurWeight(tempkey, centerkey, surfacealignment);
			AO_IL += tempsample * tempweight;
			centerweight   += tempweight;
		}
	}

	return float4(AO_IL / centerweight);
}

/* Calculates the bayer dither pattern that's used to jitter
   the direction of the AO samples per pixel.
   Why this instead of precalculated texture? BECAUSE I CAN.
   Using this ordered jitter instead of a pseudorandom one
   has 3 advantages: it seems to be more cache-aware, the AO
   is (given a fitting AO sample distribution pattern) a lot less
   noisy (better variance, see Alchemy AO) and bilateral blur
   needs a much smaller kernel: from my tests a blur kernel
   of 5x5 is fine for most settings, but using a pseudorandom
   distribution still has noticeable grain with 12x12++.
   Smaller bayer matrix sizes have more obvious directional
   AO artifacts but are easier to blur. */
float GetBayerFromCoordLevel(float2 pixelpos, int maxLevel)
{
	float finalBayer = 0.0;

	for(float i = 1-maxLevel; i<= 0; i++)
	{
		float bayerSize = exp2(i);
	        float2 bayerCoord = floor(pixelpos * bayerSize) % 2.0;
		float bayer = 2.0 * bayerCoord.x - 4.0 * bayerCoord.x * bayerCoord.y + 3.0 * bayerCoord.y;
		finalBayer += exp2(2.0*(i+maxLevel))* bayer;
	}

	float finalDivisor = 4.0 * exp2(2.0 * maxLevel)- 4.0;
	//raising all values by increment is false but in AO pass it makes sense. Can you see it?
	return finalBayer/ finalDivisor + 1.0/exp2(2.0 * maxLevel);
}

/* Main AO pass. The samples are taken in an outward spiral,
   that way a simple rotation matrix is enough to provide
   the sample locations. The rotation angle is fine-tuned,
   it yields an optimal (optimal as in "I couldn't find a better one")
   sample distribution. Vogel algorithm uses the golden angle,
   and samples are more uniformly distributed over the disc but
   AO quality suffers a lot of samples are lining up (having the
   same sampling direction). Test it yourself: make angle depending
   on texcoord.x and you'll see that AO quality is highly depending
   on angle. Mara and McGuire solve this in their Alchemy AO approach
   by providing a hand-selected rotation for each sample count,
   however my angle seems to produce better results and doesn't require
   declaring a huge constant array or any CPU side code. */
float4 GetMXAO(float2 texcoord, float3 normal, float3 position, float nSamples, float2 currentVector, float mipFactor, float fNegInvR2, float radiusJitter, float sampleRadius)
{
	float4 AO_IL = 0.0;
	float2 currentOffset;

	[loop]
	for(int iSample=0; iSample < nSamples; iSample++)
	{
		currentVector = mul(currentVector.xy, float2x2(0.575,0.81815,-0.81815,0.575));
		currentOffset = texcoord.xy + currentVector.xy * float2(1.0,ASPECTRATIO) * (iSample + radiusJitter);

		float mipLevel = saturate(log2(mipFactor*iSample)*0.2 - 0.6) * 5.0;

		float3 occlVec 		= -position + GetPositionLOD(currentOffset.xy, mipLevel);
		float  occlDistanceRcp 	= rsqrt(dot(occlVec,occlVec));
		float  occlAngle 	= dot(occlVec, normal)*occlDistanceRcp;

		float fAO = saturate(1.0 + fNegInvR2/occlDistanceRcp)  * saturate(occlAngle - fMXAONormalBias);

		#if defined(MXAO_IL) /// -type switch
			float3 fIL = ReShade_Initial.SampleLevel(ReShade_sL, currentOffset ,mipLevel + MXAO_MIPLEVEL_IL).xyz;
			#if defined(MXAO_BACKFACE) /// -type switch
				float3 offsetNormals = normalize(texNormBayer.SampleLevel(ReShade_sL, currentOffset, mipLevel + MXAO_MIPLEVEL_IL).xyz * 2.0 - 1.0);
				float facingtoSource = dot(occlVec,offsetNormals)*occlDistanceRcp;
				fIL = fIL - fIL*saturate(facingtoSource*2.0);
			#endif
			AO_IL.w += fAO - fAO * saturate(dot(fIL,float3(0.299,0.587,0.114)));
			AO_IL.xyz += fIL*fAO;
		#else
			AO_IL.w += fAO;
		#endif
	}

#if defined(MXAO_IL)
	AO_IL = AO_IL/(0.4*(1.0-fMXAONormalBias)*nSamples*sqrt(sampleRadius));
	AO_IL.w = saturate(AO_IL.w);
	return AO_IL;
#else
	return saturate(AO_IL/(0.4*(1.0-fMXAONormalBias)*nSamples*sqrt(sampleRadius)));
#endif
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Pixel Shaders
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/* Setup color, depth and normal data. Alpha channel of normal
   texture provides the per pixel jitter for AO sampling. */
float4 PS_AO_PreN(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target
{
    return float4(GetNormalFromDepth(texcoord.xy).xyz * 0.5 + 0.5, GetBayerFromCoordLevel(vpos.xy, iMXAOBayerDitherLevel));
	//ReShade_GetLinearizedDepth(texcoord, farplane) * farplane
}
float PS_AO_PreD(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target
{
    float farplane;
    return ReShade_GetLinearizedDepth(texcoord, farplane) * farplane;
}

float4 PS_AO_Gen(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target
{
	float4 normalSample = texNormBayer.SampleLevel(ReShade_sL, texcoord.xy, 0);

	float3 ScreenSpaceNormals = normalSample.xyz * 2.0 - 1.0;
	float3 ScreenSpacePosition = GetPositionLOD(texcoord.xy, 0);

#if defined(MXAO_SMOOTHNORMALS) /// -type switch
	ScreenSpaceNormals = GetSmoothedNormals(texcoord, ScreenSpaceNormals, ScreenSpacePosition);
#endif
    float2 farplanew = mul(float4(0, 0, 1, 1), ReShade_tPI).zw;
    float farplane = farplanew.x / farplanew.y;

	float scenedepth = ScreenSpacePosition.z / farplane;
	ScreenSpacePosition += ScreenSpaceNormals * scenedepth;

	float SampleRadiusScaled  = 0.2*fMXAOSampleRadius*fMXAOSampleRadius / (iMXAOSampleCount * ScreenSpacePosition.z);
	float mipFactor = SampleRadiusScaled * 3200.0;

	float2 currentVector;
	sincos(2.0*3.14159274*normalSample.w, currentVector.y, currentVector.x);
	static const float fNegInvR2 = -1.0/(fMXAOSampleRadius*fMXAOSampleRadius);
	currentVector *= SampleRadiusScaled;

	float4 res = GetMXAO(texcoord,
		      ScreenSpaceNormals,
		      ScreenSpacePosition,
		      iMXAOSampleCount,
		      currentVector,
		      mipFactor,
		      fNegInvR2,
		      normalSample.w,
		      fMXAOSampleRadius);

    res = pow(abs(res), 1.0 / MXAO_BLUR_GAMMA);

#if !defined(MXAO_IL)
    res.xyz = normalSample.xyz;
#endif
    return res;
}

/* Box blur instead of gaussian seems to produce better
   results for low kernel sizes. The offsets and weights
   here make use of bilinear sampling, hence sampling
   in 1.5 .. 3.5 ... 5.5 pixel offsets.*/
float4 PS_AO_Blur1(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target
{
	#if defined(MXAO_IL)
		return GetBlurredAOIL(texcoord.xy, ReShade_BackBuffer, float2(1.0,0.0), fMXAOBlurSteps);
	#else
		return GetBlurredAO(texcoord.xy, ReShade_BackBuffer, float2(1.0,0.0), fMXAOBlurSteps);
	#endif
}

/* Second box blur pass and AO/IL combine. The given formula
   yields to actual physical background or anything, it's just
   a lot more visually pleasing than most formulas of similar
   implementations.*/
float4 PS_AO_Blur2(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target
{
	#if defined(MXAO_IL)
		float4 MXAO = GetBlurredAOIL(texcoord.xy, ReShade_BackBuffer, float2(0.0,1.0), fMXAOBlurSteps);
		MXAO = pow(saturate(MXAO),MXAO_BLUR_GAMMA);
	#else
		float4 MXAO = GetBlurredAO(texcoord.xy, ReShade_BackBuffer, float2(0.0,1.0), fMXAOBlurSteps);
		MXAO.xyz = 0;
		MXAO.w = pow(saturate(MXAO.w),MXAO_BLUR_GAMMA);
	#endif

	float scenedepth = GetLinearDepth(texcoord.xy);

	MXAO.xyz  = lerp(dot(MXAO.xyz,float3(0.299,0.587,0.114)),MXAO.xyz,fMXAOIndirectLightingSaturation) * fMXAOIndirectLightingAmount * 4;
	MXAO.w    = 1.0-pow(1.0-MXAO.w, fMXAOAmbientOcclusionAmount*4.0);

	MXAO.w    = lerp(MXAO.w, 0.0,smoothstep(fMXAOFadeoutStart, fMXAOFadeoutEnd, scenedepth));
	MXAO.xyz  = lerp(MXAO.xyz,0.0,smoothstep(fMXAOFadeoutStart, fMXAOFadeoutEnd, scenedepth));

	float3 GI = MXAO.w - MXAO.xyz;
	GI = max(0.0,1-GI);

	return float4(GI,1);
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Technique
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

technique11 MXAO
{
    pass P0 <string format=MXAO_NORMALS_FORMAT; bool mips=true;>
    {
        SetPixelShader(CompileShader(ps_4_0, PS_AO_PreN()));
    }
	pass P1 <string format="R32_Float"; bool mips=true;>
    {
        SetPixelShader(CompileShader(ps_4_0, PS_AO_PreD()));
    }
	pass P2 <string format=OUTFORMAT;>
    {
        SetPixelShader(CompileShader(ps_4_0, PS_AO_Gen()));
    }
	pass P3 <string format=OUTFORMAT;>
    {
        SetPixelShader(CompileShader(ps_4_0, PS_AO_Blur1()));
    }
	pass P4 <string format=OUTFORMAT;>
    {
        SetPixelShader(CompileShader(ps_4_0, PS_AO_Blur2()));
    }
}
