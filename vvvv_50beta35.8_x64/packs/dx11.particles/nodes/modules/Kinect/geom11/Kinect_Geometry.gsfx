Texture2D texRGBDepth <string uiname="RGBDepth";>;
Texture2D texWorld <string uiname="World";>;
Texture2D texNormal <string uiname="Normal";>;

float maxDistance = 0.1;
float minZ = 0;
float maxZ = 8;

SamplerState sPoint : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Border;
    AddressV = Border;
};


cbuffer cbPerDraw : register(b0)
{
	float4x4 tVP : LAYERVIEWPROJECTION;
	float4x4 tW : WORLD;
};

struct VS_IN
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct VS_OUTPUT
{
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
};



VS_OUTPUT VS(VS_IN input)
{
	VS_OUTPUT output;

	// position
	float4 position = float4( texWorld.SampleLevel(sPoint,input.uv.xy,0).xyz *  float3(-1,1,1), 1);
	if (position.z < minZ || position.z > maxZ) position.w = 0;
	output.pos = mul(position,mul(tW,tVP));
	
	// normal
	output.norm =texNormal.SampleLevel(sPoint,input.uv.xy,0).xyz;
	
	float2 texUvColor = texRGBDepth.SampleLevel(sPoint,input.uv.xy,0).rg;
	output.uv = texUvColor;
	
    return output;
}

[maxvertexcount(3)]
void GS(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT> gsout)
{
	VS_OUTPUT elem = (VS_OUTPUT)0;
	
	// check if the distance between all 3 vertices of the triangle is 
	// below the given threshold
	if( distance(input[0].pos.xyz,input[1].pos.xyz) < maxDistance &&
		distance(input[0].pos.xyz,input[2].pos.xyz) < maxDistance && 
		distance(input[1].pos.xyz,input[2].pos.xyz) < maxDistance &&
		input[0].pos.w != 0 && input[1].pos.w != 0 && input[2].pos.w != 0
		){
			for(int i = 0; i < 3;i++){
				if(input[i].pos.z != 0) gsout.Append(input[i]);
			}
	}
	gsout.RestartStrip();
	
}

GeometryShader gsStreamOut = ConstructGSWithSO(CompileShader(gs_4_0, GS()), "POSITION.xyzw; NORMAL.xyz; TEXCOORD.xy", NULL, NULL, NULL, -1);

technique10 Mesh
{
    pass P0
    {
        SetVertexShader(CompileShader(vs_4_0, VS()));
        SetGeometryShader(gsStreamOut);
    }  
}

