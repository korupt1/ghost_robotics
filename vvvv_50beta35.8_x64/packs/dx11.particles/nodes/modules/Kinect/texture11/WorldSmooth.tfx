//@author: tmp
//@help: outputs a weighted average image assembled of all imageslices in a 3d texture
//@tags: texture3d, average
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture3D texture3d <string uiname="Texture3d In";>;
float sliceCount <string uiname="slice Count";>;  // the slice
float sliceIndex <string uiname="slice Index";>;  // the slice
float distanceThreshold <float uimin=0.000;> = 0.01; 

SamplerState volumeSampler  : IMMUTABLE
{
	Filter = MIN_MAG_MIP_POINT;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 colFinal = float4(0,0,0,0);
	
	bool skip = false;
	int Denominator = 0;
	
	// we iterate through all buffered images and addup their weighted color
	for (int i = 1; i <= sliceCount; i++){
		// start with the oldest buffered image
		float depth = ((sliceIndex + i) % sliceCount) / sliceCount;
		float4 col = texture3d.Sample(volumeSampler, float3(input.uv, depth));
		// now addup the color -> newer images are higher weighted
		colFinal += col * i;
		// addup the denominator - we need it to divide the rgb values later
		Denominator += i;
		
		// now we pick the next image and check if the depth-difference is
		// above a threshold - we need this to skip the edge rendering of fast
		// moving objects (and depth shadows)
		float depthtest = ((sliceIndex + i - 1) % sliceCount) / sliceCount;
		float4 coltest = texture3d.Sample(volumeSampler, float3(input.uv, depthtest));
		if ( coltest.z == 0.0f || distance(col.r ,coltest.r) > distanceThreshold) skip = true;
	}
	
	if(skip) colFinal = float4(0,0,0,0);
	else colFinal = colFinal / Denominator;
	
	return colFinal;
}

technique10 DepthSmooth
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



