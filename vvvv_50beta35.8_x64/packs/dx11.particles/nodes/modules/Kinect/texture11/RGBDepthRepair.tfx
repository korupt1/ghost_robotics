//@author: tmp
//@help: Identify zero-pixels and replace them by non-zero pixels that surround them.
//@tags: texture, filter
//@credits: 

Texture2D texture2d : PREVIOUS;
float2 R:TARGETSIZE;
SamplerState pSamp : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Border;
    AddressV = Border;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(pSamp,input.uv);
	
	int counter = 0;
	if ( c.r < 0.00000001f &&  c.g < 0.00000001f ){
		
		for(int dX = -2; dX <= 2; dX++) {
			for(int dY = -2; dY <= 2; dY++) {	
				
				// We do not want to consider the candidate pixel
				if(dX != 0 || dY != 0){
					
					float2 offset = float2(float(dX), float(dY));
					float3 cBand = texture2d.SampleLevel(pSamp,input.uv + offset/R,0).xyz;
					
					// we only look for non-zero pixels
					if (cBand.r > 0.00000001f || cBand.g > 0.00000001f){
						c.r += cBand.x;
						c.g += cBand.y;
						counter++;
					}
				}
				
			}	
		}
		c.r /= counter;
		c.g /= counter;
		
	}
	
	
	
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



