
#include <packs/mp.fxh/texture/depthReconstruct.fxh>

Texture2D<float> Depth: PREVIOUS;
Texture2D<float> DepthI: INITIAL;
Texture2D<uint4> Stencil;
Texture2D Normals;

SamplerState s0 <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_POINT;
	AddressU=CLAMP;
	AddressV=CLAMP;
	//MipLODBias = -1;
};

cbuffer cb
{
	float4x4 CamProj : CPROJ;
	float4x4 CamProjInv : CPROJINV;
	float2 oR = float2(256, 256);
	float2 R : TARGETSIZE;
	float aoSize = 1;
	float kernelSize = 32;
	float strength = 1;
	float Gamma = 1;
	float NoiseAmount = 0;
	float RandomSeed = 0;
	bool IgnoreStencil = false;
};

StructuredBuffer<float2> kernel;

float _dnoise1(float3 u){
	u=dot(u+.2,float3(1,57,21));
	return (u.x*(.1+sin(u.x)));
}
float4 _dnoise4(float2 x,float RandomSeed){
	RandomSeed+=.00001;
	float4 c={
	_dnoise1(float3((x+RandomSeed*13+41)+11,length(sin((x-59)/151+RandomSeed*float2(11,7))))+.5),
	_dnoise1(float3((x+RandomSeed*7+293)+5,length(sin((x+127)/163+RandomSeed*float2(13,5))))+.5),
	_dnoise1(float3((x+RandomSeed*5+113)+7,length(sin((x+191)/173+RandomSeed*float2(7,17))))+.5),
	_dnoise1(float3((x+RandomSeed*11+97)+13,length(sin((x-37)/181+RandomSeed*float2(5,23))))+.5)
	};
	return frac(c+x.x*2+RandomSeed+dot(c,1))-.5;
}

float3 GetViewPos(SamplerState SS, float2 uv)
{
	float d = Depth.SampleLevel(SS, uv, 0);
	return UVZtoVIEW(uv, d, CamProj, CamProjInv);
}
float3 GetViewPos(SamplerState SS, float2 uv, out float d)
{
	d = Depth.SampleLevel(SS, uv, 0);
	return UVZtoVIEW(uv, d, CamProj, CamProjInv);
}

float getRandom(in float2 uv)
{	return ((frac(uv.x * (R.x/2.0))*0.25)+(frac(uv.y*(R.y/2.0))*0.5));	}

float3 getFaceNormal( float3 position , float2 uv)
{	
	// Get the face normal by using position buffer derivatives
	// dFdx/dFdy may also be used
	float2 pixelStep = 1.0 / R ;
	
	float3 n1 = cross( ( GetViewPos(s0, uv - pixelStep * float2( 1, 0 ) ) - position ), 
					 ( GetViewPos(s0, uv - pixelStep * float2( 0, 1 ) ) - position ) );
						  
	float3 n2 = cross( ( GetViewPos(s0, uv + pixelStep * float2( 1, 0 ) ) - position ), 
					 ( GetViewPos(s0, uv + pixelStep * float2( 0, 1 ) ) - position ) );
	  
	return normalize( n1 + n2 );
}

float4 PS(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
    int3 puv = int3((int2)(uv*oR), 0);
    uint4 stcl = Stencil.Load(puv);
    if((any(stcl > 0) && any(stcl < 129)) || IgnoreStencil)
    {
		// Get the current pixel's positiom
    	float d;
		float3 currentPos = GetViewPos(s0, uv, d);
		
		// Get the current pixel's distance
		// This is very much like the pixel's depth
		float currentDistance = length( currentPos );
	
		// Get either pixel normal or face normal
    	#if defined(ONLYDEPTH)
		float3 currentNormal = getFaceNormal(currentPos, uv);
    	#else
		float3 currentNormal = Normals.SampleLevel(s0, uv, 0).rgb*2-1;
    	#endif
	
		// Calculate an aspect-ratio variable. This is required because the output buffer is non-square
		// The process will work without this, however, the result will look weird/incorrect
		float2 aspectRatio = float2( min( 1.0, R.y / R.x ), min( 1.0, R.x / R.y ) );
	
		// Grab a random vector from a 8x8 tiled random texture
		
		// Transform randomVec from range 0 - 1 to range -1 - 1
		
		// Create a 2D rotation matrix
		// For your own source, it is better to #define PI
		
		float amount = 0.0;
		
		for ( uint i = 0; i < uint( kernelSize ); i++ )
		{
			float4 randomVec = _dnoise4(uv*100, RandomSeed + ((float)i)*0.247);
			float2x2 rotMat = float2x2( float2( cos( randomVec.x * 3.1415926 ), -sin( randomVec.x * 3.1415926 ) ),
								float2( sin( randomVec.x * 3.1415926 ), cos( randomVec.x * 3.1415926 ) ) );
			// Retrieve the kernel vector and scale it with aspectRatio
			float2 kernelVec = kernel[i];
			kernelVec *= aspectRatio;
		
			float radius = aoSize * lerp(1,randomVec.y, NoiseAmount);
			
			kernelVec = lerp(kernelVec, mul(rotMat, kernelVec), NoiseAmount);
		
			// Divide by currentDistance to get the correct behaviour and scale with radius
			kernelVec = ( kernelVec / currentDistance ) * radius;
			
			// Calculate a horizon vector
			float3 pos = GetViewPos(s0, uv + kernelVec );
			pos = pos - currentPos;
			
			// Calculate the horizon angle
			float angle = dot( pos, currentNormal );
			
			// Use a normalized angle to ignore small angles
			angle *= step( 0.3, angle / length( pos ) );
	
			// Bias the angle depending on distance
			angle -= currentDistance * 0.001;
			angle = max( 0.0, angle );
			// We diminish the angle if it is too close to the view
			angle /= dot( pos, pos ) / min( currentDistance * 0.25, 1.0 ) + 0.00001;
			
			amount += angle;
		}
		
		// Create the final amount value
		amount *= strength / kernelSize;
		amount = 1.0 - amount;
		amount = max( 0.0, amount );
		
		float o = pow(saturate(amount),Gamma);
    	float dm = lerp(1, saturate(currentPos.z*0.5), 1-saturate(o*5-4));
    	o = saturate(o*lerp(0.3,1,dm));
	
		return o;
    }
	else return 1;
}
float4 SSAOBlurB(float4 PosWVP:SV_POSITION, float2 uv:TEXCOORD0): SV_Target
{
    int3 puv = int3((int2)(uv*oR), 0);
    uint4 stcl = Stencil.Load(puv);
    if((any(stcl > 0) && any(stcl < 129)) || IgnoreStencil)
    {
		float2 InvScreenSize = 3/R;
		float o = 1;
		const float2 vec[8] = {
			float2( 1, 1),
			float2(-1,-1),
			float2( 1,-1),
			float2(-1, 1),
			float2( 1, 0),
			float2(-1, 0),
			float2( 0, 1),
			float2( 0,-1),
		};
		
		float ao = Depth.SampleLevel(s0, uv, 0);
		int samples = 1;
    	float dd = DepthI.SampleLevel(s0, uv, 0);
		[unroll]
		for (int k=0;k<8;k++)
    	{
			float2 tcoord = uv+float2(vec[k].x*InvScreenSize.x,vec[k].y*InvScreenSize.y);
    		if(abs(dd-DepthI.SampleLevel(s0,tcoord,0)) > 0.0005) continue;
			ao+=Depth.SampleLevel(s0,tcoord,0);
			samples++;
    	}
		ao/=samples;
    	return float4(ao.xxx,1);
    }
	else return 1;
}
float4 SSAOBlurF(float4 PosWVP:SV_POSITION, float2 uv:TEXCOORD0): SV_Target
{
    int3 puv = int3((int2)(uv*oR), 0);
    uint4 stcl = Stencil.Load(puv);
    if((any(stcl > 0) && any(stcl < 129)) || IgnoreStencil)
    {
		float2 InvScreenSize = 1/R;
		float o = 1;
		const float2 vec[8] = {
			float2( 1, 1),
			float2(-1,-1),
			float2( 1,-1),
			float2(-1, 1),
			float2( 1, 0),
			float2(-1, 0),
			float2( 0, 1),
			float2( 0,-1),
		};
		
		float ao = Depth.SampleLevel(s0, uv, 0);
		int samples = 1;
    	float dd = DepthI.SampleLevel(s0, uv, 0);
		[unroll]
		for (int k=0;k<8;k++)
    	{
			float2 tcoord = uv+float2(vec[k].x*InvScreenSize.x,vec[k].y*InvScreenSize.y);
    		if(abs(dd-DepthI.SampleLevel(s0,tcoord,0)) > 0.0005) continue;
			ao+=Depth.SampleLevel(s0,tcoord,0);
			samples++;
    	}
		ao/=samples;
    	return float4(ao.xxx,1);
    }
	else return 1;
}

technique10 SSAOt{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,PS()));}
	pass P1 <string format="R16G16B16A16_Float"; int iterations=3;>
	{SetPixelShader(CompileShader(ps_4_0,SSAOBlurB()));}
	pass P2 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,SSAOBlurF()));}
}